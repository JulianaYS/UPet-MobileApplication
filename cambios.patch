diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
index d56e425..c1e09eb 100644
--- a/.idea/deploymentTargetDropDown.xml
+++ b/.idea/deploymentTargetDropDown.xml
@@ -2,6 +2,12 @@
 <project version="4">
   <component name="deploymentTargetDropDown">
     <value>
+      <entry key="PostRegisterScreenPreview">
+        <State />
+      </entry>
+      <entry key="PostRegisterScreenPreview (1)">
+        <State />
+      </entry>
       <entry key="SignInScrenPreview (1)">
         <State />
       </entry>
diff --git a/app/release/app-release.apk b/app/release/app-release.apk
new file mode 100644
index 0000000..497e7a8
Binary files /dev/null and b/app/release/app-release.apk differ
diff --git a/app/release/baselineProfiles/0/app-release.dm b/app/release/baselineProfiles/0/app-release.dm
new file mode 100644
index 0000000..5e4ed3a
Binary files /dev/null and b/app/release/baselineProfiles/0/app-release.dm differ
diff --git a/app/release/baselineProfiles/1/app-release.dm b/app/release/baselineProfiles/1/app-release.dm
new file mode 100644
index 0000000..24caa0e
Binary files /dev/null and b/app/release/baselineProfiles/1/app-release.dm differ
diff --git a/app/release/output-metadata.json b/app/release/output-metadata.json
new file mode 100644
index 0000000..2169353
--- /dev/null
+++ b/app/release/output-metadata.json
@@ -0,0 +1,37 @@
+{
+  "version": 3,
+  "artifactType": {
+    "type": "APK",
+    "kind": "Directory"
+  },
+  "applicationId": "pe.edu.upc.upet",
+  "variantName": "release",
+  "elements": [
+    {
+      "type": "SINGLE",
+      "filters": [],
+      "attributes": [],
+      "versionCode": 1,
+      "versionName": "1.0",
+      "outputFile": "app-release.apk"
+    }
+  ],
+  "elementType": "File",
+  "baselineProfiles": [
+    {
+      "minApi": 28,
+      "maxApi": 30,
+      "baselineProfiles": [
+        "baselineProfiles/1/app-release.dm"
+      ]
+    },
+    {
+      "minApi": 31,
+      "maxApi": 2147483647,
+      "baselineProfiles": [
+        "baselineProfiles/0/app-release.dm"
+      ]
+    }
+  ],
+  "minSdkVersionForDexing": 24
+}
\ No newline at end of file
diff --git a/app/src/main/java/pe/edu/upc/upet/feature_pet/data/repository/PetRepository.kt b/app/src/main/java/pe/edu/upc/upet/feature_pet/data/repository/PetRepository.kt
index 649bf2b..28062ab 100644
--- a/app/src/main/java/pe/edu/upc/upet/feature_pet/data/repository/PetRepository.kt
+++ b/app/src/main/java/pe/edu/upc/upet/feature_pet/data/repository/PetRepository.kt
@@ -4,6 +4,7 @@ import pe.edu.upc.upet.feature_pet.data.remote.PetRequest
 import pe.edu.upc.upet.feature_pet.data.remote.PetResponse
 import pe.edu.upc.upet.feature_pet.data.remote.PetService
 import pe.edu.upc.upet.feature_pet.data.remote.PetServiceFactory
+import pe.edu.upc.upet.utils.TokenManager
 import retrofit2.Call
 import retrofit2.Callback
 import retrofit2.Response
diff --git a/app/src/main/java/pe/edu/upc/upet/ui/screens/auth/aditionalInformation/PostRegisterScreen.kt b/app/src/main/java/pe/edu/upc/upet/ui/screens/auth/aditionalInformation/PostRegisterScreen.kt
new file mode 100644
index 0000000..6361f64
--- /dev/null
+++ b/app/src/main/java/pe/edu/upc/upet/ui/screens/auth/aditionalInformation/PostRegisterScreen.kt
@@ -0,0 +1,17 @@
+package pe.edu.upc.upet.ui.screens.auth.aditionalInformation
+
+import androidx.compose.runtime.Composable
+import androidx.compose.ui.tooling.preview.Preview
+import pe.edu.upc.upet.ui.screens.auth.aditionalInformation.shared.PetOwnerPostRegister
+import pe.edu.upc.upet.ui.screens.auth.aditionalInformation.shared.VeterinarianPostRegister
+
+@Composable
+fun PostRegisterScreen(){
+
+    VeterinarianPostRegister()
+}
+@Composable
+@Preview
+fun PostRegisterScreenPreview(){
+    PostRegisterScreen()
+}
\ No newline at end of file
diff --git a/app/src/main/java/pe/edu/upc/upet/ui/screens/auth/aditionalInformation/shared/PetOwnerPostRegister.kt b/app/src/main/java/pe/edu/upc/upet/ui/screens/auth/aditionalInformation/shared/PetOwnerPostRegister.kt
new file mode 100644
index 0000000..1d5bda4
--- /dev/null
+++ b/app/src/main/java/pe/edu/upc/upet/ui/screens/auth/aditionalInformation/shared/PetOwnerPostRegister.kt
@@ -0,0 +1,49 @@
+package pe.edu.upc.upet.ui.screens.auth.aditionalInformation.shared
+
+import androidx.compose.foundation.layout.Column
+import androidx.compose.foundation.layout.Spacer
+import androidx.compose.foundation.layout.height
+import androidx.compose.runtime.Composable
+import androidx.compose.runtime.mutableStateOf
+import androidx.compose.runtime.remember
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.unit.dp
+import pe.edu.upc.upet.ui.shared.AuthButton
+import pe.edu.upc.upet.ui.shared.AuthInputTextField
+import pe.edu.upc.upet.ui.shared.TextFieldType
+
+@Composable
+fun PetOwnerPostRegister(){
+    PostRegister(
+        description = { PostRegisterDescription(
+            title = "Aditional Information",
+            description = "Add location and phone number for enhanced pet care services."
+        ) },
+        form = { PetOwnerPostRegisterForm() }
+    )
+
+}
+@Composable
+fun PetOwnerPostRegisterForm(){
+    Column(
+
+    ){
+        AuthInputTextField(
+            input = remember { mutableStateOf("") },
+            placeholder = "Enter your phone number",
+            label = "Phone",
+            type = TextFieldType.Phone
+        )
+        Spacer(modifier = Modifier.height(22.dp))
+        AuthInputTextField(
+            input = remember { mutableStateOf("") },
+            placeholder = "r. Lima 104, Santiago de Surco, Lima",
+            label = "Location",
+            type = TextFieldType.Text
+        )
+        Spacer(modifier = Modifier.height(22.dp))
+        AuthButton(text ="Send")
+
+    }
+
+}
\ No newline at end of file
diff --git a/app/src/main/java/pe/edu/upc/upet/ui/screens/auth/aditionalInformation/shared/PostRegisterDescription.kt b/app/src/main/java/pe/edu/upc/upet/ui/screens/auth/aditionalInformation/shared/PostRegisterDescription.kt
new file mode 100644
index 0000000..0b6fee7
--- /dev/null
+++ b/app/src/main/java/pe/edu/upc/upet/ui/screens/auth/aditionalInformation/shared/PostRegisterDescription.kt
@@ -0,0 +1,74 @@
+package pe.edu.upc.upet.ui.screens.auth.aditionalInformation.shared
+
+import androidx.compose.foundation.background
+import androidx.compose.foundation.layout.Column
+import androidx.compose.foundation.layout.Spacer
+import androidx.compose.foundation.layout.fillMaxSize
+import androidx.compose.foundation.layout.height
+import androidx.compose.foundation.layout.padding
+import androidx.compose.material3.Scaffold
+import androidx.compose.material3.Text
+import androidx.compose.runtime.Composable
+import androidx.compose.runtime.mutableStateOf
+import androidx.compose.runtime.remember
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.graphics.Color
+import androidx.compose.ui.text.TextStyle
+import androidx.compose.ui.text.font.FontWeight
+import androidx.compose.ui.unit.dp
+import androidx.compose.ui.unit.sp
+import pe.edu.upc.upet.ui.theme.BorderPadding
+import pe.edu.upc.upet.ui.theme.UpetBackGroundPrimary
+import pe.edu.upc.upet.ui.theme.poppinsFamily
+
+@Composable
+fun PostRegister(description: @Composable ()->Unit,
+                       form : @Composable ()->Unit ){
+    Scaffold {paddingValues->
+        val fullName = remember{
+            mutableStateOf("")
+        }
+        Column(
+            modifier = Modifier
+                .padding(paddingValues)
+                .fillMaxSize()
+                .background(UpetBackGroundPrimary)
+                .padding(10.dp, 10.dp)
+        ){
+
+            description()
+            Spacer(modifier = Modifier.height(22.dp))
+            form()
+
+        }
+    }
+
+}
+@Composable
+fun PostRegisterDescription(title: String, description: String) {
+    Column(
+        modifier= Modifier.padding(BorderPadding)
+
+    ) {
+
+        Text(text = title,
+            style = TextStyle(
+                color = Color.White,
+                fontSize = 20.sp,
+                fontFamily = poppinsFamily,
+                fontWeight = FontWeight.SemiBold
+            )
+        )
+
+        Spacer(modifier = Modifier.height(22.dp))
+
+        Text(text = description,
+            style = TextStyle(
+                color = Color.White,
+                fontSize = 16.sp,
+                fontFamily = poppinsFamily,
+                fontWeight = FontWeight.Medium
+            )
+        )
+    }
+}
diff --git a/app/src/main/java/pe/edu/upc/upet/ui/screens/auth/aditionalInformation/shared/VeterinarianPostRegister.kt b/app/src/main/java/pe/edu/upc/upet/ui/screens/auth/aditionalInformation/shared/VeterinarianPostRegister.kt
new file mode 100644
index 0000000..e1b12b0
--- /dev/null
+++ b/app/src/main/java/pe/edu/upc/upet/ui/screens/auth/aditionalInformation/shared/VeterinarianPostRegister.kt
@@ -0,0 +1,118 @@
+package pe.edu.upc.upet.ui.screens.auth.aditionalInformation.shared
+
+import androidx.compose.foundation.layout.Column
+import androidx.compose.foundation.layout.Spacer
+import androidx.compose.foundation.layout.height
+import androidx.compose.runtime.Composable
+import androidx.compose.runtime.mutableIntStateOf
+import androidx.compose.runtime.mutableStateOf
+import androidx.compose.runtime.remember
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.unit.dp
+
+import pe.edu.upc.upet.ui.shared.AuthButton
+import pe.edu.upc.upet.ui.shared.AuthInputTextField
+import pe.edu.upc.upet.ui.shared.RadioButtonsOptions
+import pe.edu.upc.upet.ui.shared.TextFieldType
+
+@Composable
+fun VeterinarianPostRegister(){
+    PostRegister(
+        description = { PostRegisterDescription(
+            title = "Select Veterinary Clinic",
+            description = "Do you want to register a new veterinary clinic or join an existing clinic?"
+        ) },
+        form = { VeterinarianPostRegisterForm() }
+    )
+
+}
+@Composable
+fun VeterinarianPostRegisterForm(){
+    val  selectedOption = remember{
+        mutableIntStateOf(0)
+    }
+    Column {
+        RadioButtonsOptions(
+            option1 = "Veterinarian",
+            option2 = "Pet Owner",
+            selectedOption = selectedOption
+        )
+        Spacer(modifier = Modifier.height(22.dp))
+        if(selectedOption.value == 1)
+            NewClinicForm()
+        else
+            ExistingClinicForm()
+    }
+
+}
+@Composable
+fun ExistingClinicForm(){
+    val selectedClinics = remember {
+        mutableStateOf("")
+    }
+    val password = remember {
+        mutableStateOf("")
+    }
+
+    AuthInputTextField(
+        input = selectedClinics,
+        placeholder = "Select your clinic",
+        label = "Clinic",
+        type = TextFieldType.Dropdown,
+        dropdownList = listOf("Clinic 1", "Clinic 2", "Clinic 3")
+    )
+    Spacer(modifier = Modifier.height(22.dp))
+    AuthInputTextField(
+        input = password,
+        placeholder = "Enter the clinic password",
+        label = "Password",
+        type = TextFieldType.Password
+    )
+    Spacer(modifier = Modifier.height(22.dp))
+
+    AuthButton(text ="Send")
+
+}
+@Composable
+fun NewClinicForm(){
+    val clinicName = remember{
+        mutableStateOf("")
+    }
+
+    val clinicLocation = remember{
+        mutableStateOf("")
+    }
+    val officeHours = remember{
+        mutableStateOf("")
+    }
+    val phoneNumber = remember{
+        mutableStateOf("")
+    }
+
+    AuthInputTextField(
+        input = clinicName,
+        placeholder = "Enter your clinic name",
+        label = "Clinic Name",
+    )
+    Spacer(modifier = Modifier.height(22.dp))
+    AuthInputTextField(
+        input = clinicLocation,
+        placeholder = "r. Lima 104, Santiago de Surco, Lima",
+        label = "Location",
+    )
+    Spacer(modifier = Modifier.height(22.dp))
+    AuthInputTextField(
+        input = officeHours,
+        placeholder = "Enter your office hours",
+        label = "Office Hours",
+    )
+    Spacer(modifier = Modifier.height(22.dp))
+    AuthInputTextField(
+        input = phoneNumber,
+        placeholder = "Enter your phone number",
+        label = "Phone",
+        type = TextFieldType.Phone
+    )
+    Spacer(modifier = Modifier.height(22.dp))
+    AuthButton(text ="Send")
+}
\ No newline at end of file
diff --git a/app/src/main/java/pe/edu/upc/upet/ui/screens/auth/signin/SignInScreen.kt b/app/src/main/java/pe/edu/upc/upet/ui/screens/auth/signin/SignInScreen.kt
index a616c7d..3079e20 100644
--- a/app/src/main/java/pe/edu/upc/upet/ui/screens/auth/signin/SignInScreen.kt
+++ b/app/src/main/java/pe/edu/upc/upet/ui/screens/auth/signin/SignInScreen.kt
@@ -26,10 +26,12 @@ import pe.edu.upc.upet.ui.shared.AuthHeader
 import pe.edu.upc.upet.ui.shared.AuthTextButton
 import pe.edu.upc.upet.ui.shared.AuthInputTextField
 import pe.edu.upc.upet.ui.shared.Dialog
+import pe.edu.upc.upet.ui.shared.TextFieldType
 import pe.edu.upc.upet.ui.theme.BorderPadding
 import pe.edu.upc.upet.ui.theme.UpetBackGroundPrimary
 import pe.edu.upc.upet.ui.theme.Pink
 import pe.edu.upc.upet.utils.TokenManager
+import pe.edu.upc.upet.utils.validateAuth
 
 
 @Composable
@@ -75,35 +77,36 @@ fun SignInScreen(authRepository: AuthRepository = AuthRepository(), navigateTo:
                         input = password,
                         placeholder = "Enter your password",
                         label = "Password",
-                        true
+                        type = TextFieldType.Password
                     )
                     AuthTextButton("Forgot Password?", arrangement = Arrangement.End,
                         onClickClickableText = {
                             navigateTo(Routes.PasswordRecovery)
                         })
-                    AuthButton(text = "Log In", onClick = {
-                        if (email.value.isEmpty()) {
-                            snackbarMessage.value = "You must enter your email."
-                            showErrorSnackbar.value = true
-                        } else if(!Patterns.EMAIL_ADDRESS.matcher(email.value).matches()){
-                            snackbarMessage.value = "You must enter a valid email."
-                            showErrorSnackbar.value = true
-                        } else if (password.value.isEmpty()) {
-                            snackbarMessage.value = "You must enter your password."
-                            showErrorSnackbar.value = true
-                        } else {
-                            authRepository.signIn(context, email.value, password.value) { success ->
-                                if (success) {
-                                    navigateTo(Routes.Home)
-                                } else {
-                                    snackbarMessage.value = "Invalid credentials."
-                                    showErrorSnackbar.value = true
+                    AuthButton(text = "Log In", onClick =
+                    {
+                        validateAuth(
+                            email = email,
+                            password = password.value,
+                            snackbarMessage = snackbarMessage,
+                            showErrorSnackbar = showErrorSnackbar,
+                            onValidationPassed = {
+                                authRepository.signIn(
+                                    context,
+                                    email.value,
+                                    password.value
+                                ) { success ->
+                                    if (success) {
+                                        navigateTo(Routes.Home)
+                                    } else {
+                                        snackbarMessage.value = "Invalid credentials."
+                                        showErrorSnackbar.value = true
+                                    }
                                 }
                             }
-
-                        }
-
-                    })
+                        )
+                    }
+                    )
                     HorizontalDivider(
                         modifier = Modifier.padding(BorderPadding),
                         thickness = 1.dp,
diff --git a/app/src/main/java/pe/edu/upc/upet/ui/screens/auth/signup/SignUpScreen.kt b/app/src/main/java/pe/edu/upc/upet/ui/screens/auth/signup/SignUpScreen.kt
index 85ed5a6..3ce7a9a 100644
--- a/app/src/main/java/pe/edu/upc/upet/ui/screens/auth/signup/SignUpScreen.kt
+++ b/app/src/main/java/pe/edu/upc/upet/ui/screens/auth/signup/SignUpScreen.kt
@@ -1,6 +1,5 @@
 package pe.edu.upc.upet.ui.screens.auth.signup
 
-import android.util.Patterns
 import androidx.compose.foundation.background
 import androidx.compose.foundation.clickable
 import androidx.compose.foundation.layout.Arrangement
@@ -13,16 +12,13 @@ import androidx.compose.foundation.layout.padding
 import androidx.compose.material3.RadioButton
 import androidx.compose.material3.RadioButtonDefaults
 import androidx.compose.material3.Scaffold
-import androidx.compose.material3.Snackbar
 import androidx.compose.material3.Text
-import androidx.compose.material3.TextButton
 import androidx.compose.runtime.Composable
 import androidx.compose.runtime.MutableState
 import androidx.compose.runtime.mutableIntStateOf
 import androidx.compose.runtime.mutableStateListOf
 import androidx.compose.runtime.mutableStateOf
 import androidx.compose.runtime.remember
-import androidx.compose.ui.Alignment
 import androidx.compose.ui.Modifier
 import androidx.compose.ui.graphics.Color
 import androidx.compose.ui.text.TextStyle
@@ -30,7 +26,6 @@ import androidx.compose.ui.text.font.FontWeight
 import androidx.compose.ui.unit.dp
 import androidx.compose.ui.unit.sp
 import pe.edu.upc.upet.feature_auth.data.remote.UserRequest
-import pe.edu.upc.upet.feature_auth.data.remote.UserResponse
 import pe.edu.upc.upet.feature_auth.data.remote.UserType
 import pe.edu.upc.upet.feature_auth.data.repository.AuthRepository
 import pe.edu.upc.upet.navigation.Routes
@@ -40,11 +35,13 @@ import pe.edu.upc.upet.ui.shared.AuthHeader
 import pe.edu.upc.upet.ui.shared.AuthInputTextField
 import pe.edu.upc.upet.ui.shared.AuthTextButton
 import pe.edu.upc.upet.ui.shared.Dialog
+import pe.edu.upc.upet.ui.shared.TextFieldType
 import pe.edu.upc.upet.ui.theme.BorderPadding
 import pe.edu.upc.upet.ui.theme.UpetBackGroundPrimary
 import pe.edu.upc.upet.ui.theme.Pink
 import pe.edu.upc.upet.ui.theme.poppinsFamily
-
+import pe.edu.upc.upet.utils.validateAuth
+import pe.edu.upc.upet.ui.shared.RadioButtonsOptions
 
 @Composable
 fun SignUpScreen( navigateTo: (String) -> Unit ){
@@ -86,34 +83,29 @@ fun SignUpScreen( navigateTo: (String) -> Unit ){
                     AuthHeader(texto = "Register")
                     AuthInputTextField(input = fullName, placeholder = "Enter your full name", label ="Full Name" )
                     AuthInputTextField(input = email, placeholder = "Enter your email", label ="Email" )
-                    AuthInputTextField(input = password, placeholder = "Enter your password", label ="Password", true )
+                    AuthInputTextField(input = password, placeholder = "Enter your password", label ="Password", type = TextFieldType.Password )
                     AuthUserRolCheckBox(selectedOption = selectedOption)
                     AuthCheckBox(checkedState = checkedState)
                     AuthButton(text = "Register", onClick = {
-                        if (fullName.value.isEmpty()) {
-                            snackbarMessage.value = "You must enter your full name."
-                            showErrorSnackbar.value = true
-                        } else if (email.value.isEmpty()) {
-                            snackbarMessage.value = "You must enter your email."
-                            showErrorSnackbar.value = true
-                        } else if(!Patterns.EMAIL_ADDRESS.matcher(email.value).matches()){
-                            snackbarMessage.value = "You must enter a valid email."
-                            showErrorSnackbar.value = true
-                        } else if (password.value.isEmpty()) {
-                            snackbarMessage.value = "You must enter your password."
-                            showErrorSnackbar.value = true
-                        } else if (!checkedState.value) {
-                            snackbarMessage.value = "You must accept the Terms and Conditions."
-                            showErrorSnackbar.value = true
-                        } else {
-                            registerLogicButton(userRequest = UserRequest(
-                                name = fullName.value,
-                                email = email.value,
-                                password = password.value,
-                                userType = if (selectedOption.value == 1) UserType.Vet else UserType.Owner
-                            ))
-                            navigateTo(Routes.UserLogin)
-                        }
+                        validateAuth(
+                            fullName = fullName.value,
+                            email = email,
+                            password = password.value,
+                            checkedState = checkedState.value,
+                            snackbarMessage = snackbarMessage,
+                            showErrorSnackbar = showErrorSnackbar,
+                            onValidationPassed = { // Define el lambda con la lógica de registro y navegación
+                                registerLogicButton(
+                                    userRequest = UserRequest(
+                                        name = fullName.value,
+                                        email = email.value,
+                                        password = password.value,
+                                        userType = if (selectedOption.value == 1) UserType.Vet else UserType.Owner
+                                    )
+                                )
+                                navigateTo(Routes.UserLogin)
+                            }
+                        )
                     })
 
                     AuthTextButton(text= "Already member?",
@@ -147,7 +139,7 @@ fun AuthUserRolCheckBox( selectedOption: MutableState<Int> = mutableIntStateOf(1
             fontFamily = poppinsFamily,
             fontWeight = FontWeight.Medium
         ))
-        RadioButtons(
+        RadioButtonsOptions(
             option1 = "Veterinarian",
             option2 = "Pet Owner",
             selectedOption = selectedOption
@@ -159,78 +151,11 @@ data class ToggleableInfo(
     val text: String
 )
 
-@Composable
-private fun RadioButtons(
-    option1: String = "Veterinarian",
-    option2: String = "Pet Owner",
-    selectedOption: MutableState<Int>
-) {
-    val radioButtons = remember {
-        mutableStateListOf(
-            ToggleableInfo(
-                isChecked = true,
-                text = option1
-            ),
-            ToggleableInfo(
-                isChecked = false,
-                text = option2
-            )
-        )
-    }
 
-    Row(
-        modifier = Modifier
-            .fillMaxWidth(),
-        horizontalArrangement = Arrangement.Center
-    ) {
-        radioButtons.forEachIndexed { index, info ->
-            Row(
-                modifier = Modifier
-                    .clickable {
-                        radioButtons.replaceAll {
-                            it.copy(
-                                isChecked = it.text == info.text
-                            )
-                        }
-                        selectedOption.value =
-                            if (index == 0) 1 else 2 // Asigna 1 si es la opción 1, 2 si es la opción 2
-                    }
-                    .padding(end = 10.dp)
-            ) {
-                RadioButton(
-                    selected = info.isChecked,
-                    onClick = {
-                        radioButtons.replaceAll {
-                            it.copy(
-                                isChecked = it.text == info.text
-                            )
-                        }
-                        selectedOption.value = if (index == 0) 1 else 2 // Asigna 1 si es la opción 1, 2 si es la opción 2
-                    },
-                    colors = RadioButtonDefaults.colors(
-                        selectedColor = Pink,
-                        unselectedColor = Pink
-                    ),
-                )
-                Text(
-                    text = info.text,
-                    style = TextStyle(
-                        color = Color.White,
-                        fontSize = 12.sp,
-                        fontFamily = poppinsFamily,
-                        fontWeight = FontWeight.Medium
-                    ),
-                    modifier = Modifier.padding(top = 15.dp)
-                )
-            }
-        }
-    }
-}
 
 
 fun registerLogicButton(authRepository: AuthRepository= AuthRepository(), userRequest: UserRequest){
     authRepository.signUp(userRequest) { userResponse ->
-
         if (userRequest.userType == UserType.Owner) {
             println(userResponse)
             authRepository.createPetOwner(userResponse.id, userRequest) { success ->
@@ -242,4 +167,5 @@ fun registerLogicButton(authRepository: AuthRepository= AuthRepository(), userRe
             }
         }
     }
-}
\ No newline at end of file
+}
+
diff --git a/app/src/main/java/pe/edu/upc/upet/ui/shared/AuthInputTextField.kt b/app/src/main/java/pe/edu/upc/upet/ui/shared/AuthInputTextField.kt
index d732064..89115fd 100644
--- a/app/src/main/java/pe/edu/upc/upet/ui/shared/AuthInputTextField.kt
+++ b/app/src/main/java/pe/edu/upc/upet/ui/shared/AuthInputTextField.kt
@@ -3,7 +3,10 @@ package pe.edu.upc.upet.ui.shared
 import androidx.compose.foundation.BorderStroke
 import androidx.compose.foundation.background
 import androidx.compose.foundation.border
+import androidx.compose.foundation.layout.Column
+import androidx.compose.foundation.layout.Row
 import androidx.compose.foundation.layout.fillMaxWidth
+import androidx.compose.foundation.layout.height
 import androidx.compose.foundation.layout.padding
 import androidx.compose.foundation.layout.size
 import androidx.compose.foundation.shape.RoundedCornerShape
@@ -11,14 +14,18 @@ import androidx.compose.foundation.text.KeyboardOptions
 import androidx.compose.material.icons.Icons
 import androidx.compose.material.icons.filled.Visibility
 import androidx.compose.material.icons.filled.VisibilityOff
+import androidx.compose.material3.DropdownMenu
 import androidx.compose.material3.Icon
 import androidx.compose.material3.IconButton
 import androidx.compose.material3.OutlinedTextField
 import androidx.compose.material3.Text
 import androidx.compose.runtime.Composable
 import androidx.compose.runtime.MutableState
+import androidx.compose.runtime.getValue
 import androidx.compose.runtime.mutableStateOf
 import androidx.compose.runtime.remember
+import androidx.compose.runtime.setValue
+import androidx.compose.ui.Alignment
 import androidx.compose.ui.Modifier
 import androidx.compose.ui.graphics.Color
 import androidx.compose.ui.text.TextStyle
@@ -33,28 +40,54 @@ import pe.edu.upc.upet.ui.theme.BorderPadding
 import pe.edu.upc.upet.ui.theme.UpetGray1
 import pe.edu.upc.upet.ui.theme.Pink
 import pe.edu.upc.upet.ui.theme.poppinsFamily
+
 @Composable
 fun AuthInputTextField(
     input: MutableState<String>,
     placeholder: String,
     label: String,
-    isPassword: Boolean = false
+    type: TextFieldType = TextFieldType.Text,
+    dropdownList: List<String>? = null
 ) {
     val commonPadding = BorderPadding
     val cornerSize = 10.dp
 
-    val isPasswordVisible = remember {
-        mutableStateOf(false)
-    }
     LabelTextField(label, commonPadding)
 
-    CustomOutlinedTextField(
-        input = input,
-        placeholder = placeholder,
-        isPassword = isPassword,
-        isPasswordVisible = isPasswordVisible,
-        cornerSize = cornerSize
-    )
+    when (type) {
+        TextFieldType.Password -> {
+            CustomOutlinedTextFieldPassword(
+                input = input,
+                placeholder = placeholder,
+                cornerSize = cornerSize
+            )
+        }
+        TextFieldType.Dropdown -> {
+            dropdownList?.let {
+                DropdownTextField(
+                    selectedItem = input,
+                    placeholder = placeholder,
+                    cornerSize = cornerSize,
+                    label = label,
+                    dropdownItems = it
+                )
+            }
+        }
+        TextFieldType.Phone -> {
+            CustomOutlinedTextFieldWithCountryCode(
+                phoneNumber = input,
+                placeholder = placeholder,
+                cornerSize = cornerSize
+            )
+        }
+        else -> {
+            CustomOutlinedTextFieldNormal(
+                input = input,
+                placeholder = placeholder,
+                cornerSize = cornerSize
+            )
+        }
+    }
 }
 
 
@@ -90,12 +123,19 @@ fun TextPlaceHolder(placeholder: String){
 
 }
 
+
+
+enum class TextFieldType {
+    Password,
+    Phone,
+    Dropdown,
+    Text
+}
+
 @Composable
-private fun CustomOutlinedTextField(
+fun CustomOutlinedTextFieldNormal(
     input: MutableState<String>,
     placeholder: String,
-    isPassword: Boolean,
-    isPasswordVisible: MutableState<Boolean>,
     cornerSize: Dp
 ) {
     OutlinedTextField(
@@ -105,32 +145,85 @@ private fun CustomOutlinedTextField(
             TextPlaceHolder(placeholder)
         },
         shape = RoundedCornerShape(cornerSize),
-        modifier = Modifier
-            .fillMaxWidth()
-            .size(height = 56.dp, width = 300.dp)
-            .padding(bottom = 10.dp, start= BorderPadding, end= BorderPadding)
-            .border(BorderStroke(2.dp, Pink), shape = RoundedCornerShape(cornerSize))
-            .background(Color.White, shape = RoundedCornerShape(cornerSize)),
-        textStyle = TextStyle(
-            color = if (input.value.isNotEmpty()) Color.Black else UpetGray1,
-            fontSize = 12.sp,
-            fontFamily = poppinsFamily,
-            fontWeight = FontWeight.Normal
-        ),
-        keyboardOptions = KeyboardOptions(keyboardType = if (isPassword) KeyboardType.Password else KeyboardType.Text),
-        visualTransformation = if (isPassword) {
-            if (isPasswordVisible.value) VisualTransformation.None else PasswordVisualTransformation()
-        } else VisualTransformation.None,
+        modifier = commonModifier(cornerSize),
+        textStyle = commonTextStyle(input.value),
+        keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Text),
+        visualTransformation = VisualTransformation.None
+    )
+}
+@Composable
+fun CustomOutlinedTextFieldWithCountryCode(
+    phoneNumber: MutableState<String>,
+    placeholder: String,
+    cornerSize: Dp
+) {
+    val countryCode = remember { mutableStateOf("+1") }
+
+    Row(
+        verticalAlignment = Alignment.CenterVertically
+    ) {
+
+        // Campo de texto para el número de teléfono
+        OutlinedTextField(
+            value = phoneNumber.value,
+            onValueChange = { phoneNumber.value = it },
+            placeholder = {
+                TextPlaceHolder(placeholder)
+            },
+            shape = RoundedCornerShape(cornerSize),
+            modifier = commonModifier(cornerSize),
+            textStyle = commonTextStyle(phoneNumber.value),
+            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Phone),
+            visualTransformation = VisualTransformation.None
+        )
+    }
+}
+
+
+
+@Composable
+fun CustomOutlinedTextFieldPassword(
+    input: MutableState<String>,
+    placeholder: String,
+    cornerSize: Dp
+) {
+    val isPasswordVisible = remember { mutableStateOf(false) }
+
+    OutlinedTextField(
+        value = input.value,
+        onValueChange = { input.value = it },
+        placeholder = {
+            TextPlaceHolder(placeholder)
+        },
+        shape = RoundedCornerShape(cornerSize),
+        modifier = commonModifier(cornerSize),
+        textStyle = commonTextStyle(input.value),
+        keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Password),
+        visualTransformation = if (isPasswordVisible.value) VisualTransformation.None else PasswordVisualTransformation(),
         trailingIcon = {
-            if (isPassword) {
-                IconButton(onClick = { isPasswordVisible.value = !isPasswordVisible.value }) {
-                    Icon(
-                        imageVector = if (isPasswordVisible.value) Icons.Filled.Visibility else Icons.Filled.VisibilityOff,
-                        contentDescription = if (isPasswordVisible.value) "Hide password" else "Show password",
-                        tint = Pink
-                    )
-                }
+            IconButton(onClick = { isPasswordVisible.value = !isPasswordVisible.value }) {
+                Icon(
+                    imageVector = if (isPasswordVisible.value) Icons.Filled.Visibility else Icons.Filled.VisibilityOff,
+                    contentDescription = if (isPasswordVisible.value) "Hide password" else "Show password",
+                    tint = Pink
+                )
             }
         }
     )
-}
\ No newline at end of file
+}
+
+
+
+fun commonModifier(cornerSize: Dp, start: Dp = BorderPadding, end: Dp = BorderPadding) = Modifier
+    .fillMaxWidth()
+    .size(height = 56.dp, width = 300.dp)
+    .padding(bottom = 10.dp, start = start, end = end)
+    .border(BorderStroke(2.dp, Pink), shape = RoundedCornerShape(cornerSize))
+    .background(Color.White, shape = RoundedCornerShape(cornerSize))
+
+fun commonTextStyle( input: String) = TextStyle(
+    color = if (input.isNotEmpty()) Color.Black else UpetGray1,
+    fontSize = 12.sp,
+    fontFamily = poppinsFamily,
+    fontWeight = FontWeight.Normal
+)
diff --git a/app/src/main/java/pe/edu/upc/upet/ui/shared/DropdownTextField.kt b/app/src/main/java/pe/edu/upc/upet/ui/shared/DropdownTextField.kt
new file mode 100644
index 0000000..1c8b815
--- /dev/null
+++ b/app/src/main/java/pe/edu/upc/upet/ui/shared/DropdownTextField.kt
@@ -0,0 +1,84 @@
+package pe.edu.upc.upet.ui.shared
+
+import androidx.compose.foundation.BorderStroke
+import androidx.compose.foundation.background
+import androidx.compose.foundation.border
+import androidx.compose.foundation.layout.Column
+import androidx.compose.foundation.layout.fillMaxWidth
+import androidx.compose.foundation.layout.padding
+import androidx.compose.foundation.lazy.LazyColumn
+import androidx.compose.foundation.shape.RoundedCornerShape
+import androidx.compose.material.DropdownMenuItem
+import androidx.compose.material3.OutlinedTextField
+import androidx.compose.material3.Text
+
+import androidx.compose.runtime.Composable
+import androidx.compose.runtime.MutableState
+import androidx.compose.runtime.getValue
+import androidx.compose.runtime.mutableStateOf
+import androidx.compose.runtime.remember
+import androidx.compose.runtime.setValue
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.graphics.Color
+import androidx.compose.ui.unit.Dp
+import androidx.compose.ui.unit.dp
+import pe.edu.upc.upet.ui.theme.BorderPadding
+import pe.edu.upc.upet.ui.theme.Pink
+
+@Composable
+fun DropdownTextField(
+    selectedItem: MutableState<String>,
+    cornerSize: Dp,
+    dropdownItems: List<String>,
+    placeholder: String,
+    label: String
+) {
+    var expanded by remember { mutableStateOf(false) }
+    var filteredItems by remember { mutableStateOf(dropdownItems) }
+    Column (
+        modifier = Modifier
+            .fillMaxWidth()
+            .padding(bottom = 10.dp, start = BorderPadding, end = BorderPadding)
+
+    ){
+
+        OutlinedTextField(
+            value = selectedItem.value,
+            shape= RoundedCornerShape(cornerSize),
+            textStyle= commonTextStyle(selectedItem.value),
+
+
+            modifier= commonModifier(cornerSize, start = 0.dp, end= 0.dp),
+            onValueChange = {
+                selectedItem.value = it
+                filteredItems = dropdownItems.filter { item -> item.contains(
+                    it, ignoreCase = true) }
+                expanded = true
+            },
+            placeholder = { TextPlaceHolder(placeholder) },
+
+        )
+
+        if (expanded) {
+            LazyColumn(
+                modifier = Modifier
+                    .background(Color.White)
+                    .border(BorderStroke(1.dp, Pink))) {
+                items(filteredItems.size) { index ->
+                    DropdownMenuItem(
+                        onClick = {
+                            selectedItem.value = filteredItems[index]
+                            expanded = false
+                        },
+                        modifier = Modifier.fillMaxWidth()
+                    ) {
+                        Text(
+                            text = filteredItems[index],
+                            modifier = Modifier.padding(8.dp)
+                        )
+                    }
+                }
+            }
+        }
+    }
+}
diff --git a/app/src/main/java/pe/edu/upc/upet/ui/shared/RadioButtonsOptions.kt b/app/src/main/java/pe/edu/upc/upet/ui/shared/RadioButtonsOptions.kt
new file mode 100644
index 0000000..b8be03e
--- /dev/null
+++ b/app/src/main/java/pe/edu/upc/upet/ui/shared/RadioButtonsOptions.kt
@@ -0,0 +1,91 @@
+package pe.edu.upc.upet.ui.shared
+
+import androidx.compose.foundation.clickable
+import androidx.compose.foundation.layout.Arrangement
+import androidx.compose.foundation.layout.Row
+import androidx.compose.foundation.layout.fillMaxWidth
+import androidx.compose.foundation.layout.padding
+import androidx.compose.material3.RadioButton
+import androidx.compose.material3.RadioButtonDefaults
+import androidx.compose.material3.Text
+import androidx.compose.runtime.Composable
+import androidx.compose.runtime.MutableState
+import androidx.compose.runtime.mutableStateListOf
+import androidx.compose.runtime.remember
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.graphics.Color
+import androidx.compose.ui.text.TextStyle
+import androidx.compose.ui.text.font.FontWeight
+import androidx.compose.ui.unit.dp
+import androidx.compose.ui.unit.sp
+import pe.edu.upc.upet.ui.screens.auth.signup.ToggleableInfo
+import pe.edu.upc.upet.ui.theme.Pink
+import pe.edu.upc.upet.ui.theme.poppinsFamily
+
+@Composable
+fun RadioButtonsOptions(
+    option1: String = "Veterinarian",
+    option2: String = "Pet Owner",
+    selectedOption: MutableState<Int>
+) {
+    val radioButtons = remember {
+        mutableStateListOf(
+            ToggleableInfo(
+                isChecked = true,
+                text = option1
+            ),
+            ToggleableInfo(
+                isChecked = false,
+                text = option2
+            )
+        )
+    }
+
+    Row(
+        modifier = Modifier
+            .fillMaxWidth(),
+        horizontalArrangement = Arrangement.Center
+    ) {
+        radioButtons.forEachIndexed { index, info ->
+            Row(
+                modifier = Modifier
+                    .clickable {
+                        radioButtons.replaceAll {
+                            it.copy(
+                                isChecked = it.text == info.text
+                            )
+                        }
+                        selectedOption.value =
+                            if (index == 0) 1 else 2 // Asigna 1 si es la opción 1, 2 si es la opción 2
+                    }
+                    .padding(end = 10.dp)
+            ) {
+                RadioButton(
+                    selected = info.isChecked,
+                    onClick = {
+                        radioButtons.replaceAll {
+                            it.copy(
+                                isChecked = it.text == info.text
+                            )
+                        }
+                        selectedOption.value = if (index == 0) 1 else 2 // Asigna 1 si es la opción 1, 2 si es la opción 2
+                    },
+                    colors = RadioButtonDefaults.colors(
+                        selectedColor = Pink,
+                        unselectedColor = Pink
+                    ),
+                )
+                Text(
+                    text = info.text,
+                    style = TextStyle(
+                        color = Color.White,
+                        fontSize = 12.sp,
+                        fontFamily = poppinsFamily,
+                        fontWeight = FontWeight.Medium
+                    ),
+                    modifier = Modifier.padding(top = 15.dp)
+                )
+            }
+        }
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/pe/edu/upc/upet/utils/validateAuth.kt b/app/src/main/java/pe/edu/upc/upet/utils/validateAuth.kt
new file mode 100644
index 0000000..1af25c1
--- /dev/null
+++ b/app/src/main/java/pe/edu/upc/upet/utils/validateAuth.kt
@@ -0,0 +1,35 @@
+package pe.edu.upc.upet.utils
+
+import android.util.Patterns
+import androidx.compose.runtime.MutableState
+import pe.edu.upc.upet.feature_auth.data.remote.UserRequest
+import pe.edu.upc.upet.feature_auth.data.remote.UserType
+
+fun validateAuth(
+    fullName: String="example",
+    email: MutableState<String>,
+    password: String,
+    checkedState: Boolean = true,
+    snackbarMessage: MutableState<String>,
+    showErrorSnackbar: MutableState<Boolean>,
+    onValidationPassed: () -> Unit,
+) {
+    if (fullName.isEmpty()) {
+        snackbarMessage.value = "You must enter your full name."
+        showErrorSnackbar.value = true
+    } else if (email.value.isEmpty()) {
+        snackbarMessage.value = "You must enter your email."
+        showErrorSnackbar.value = true
+    } else if (!Patterns.EMAIL_ADDRESS.matcher(email.value).matches()) {
+        snackbarMessage.value = "You must enter a valid email."
+        showErrorSnackbar.value = true
+    } else if (password.isEmpty()) {
+        snackbarMessage.value = "You must enter your password."
+        showErrorSnackbar.value = true
+    } else if (!checkedState) {
+        snackbarMessage.value = "You must accept the Terms and Conditions."
+        showErrorSnackbar.value = true
+    } else {
+        onValidationPassed()
+    }
+}
\ No newline at end of file
diff --git a/gradle/libs.versions.toml b/gradle/libs.versions.toml
index 6c677b8..4ed7b8e 100644
--- a/gradle/libs.versions.toml
+++ b/gradle/libs.versions.toml
@@ -15,6 +15,7 @@ materialIconsExtended = "1.6.6"
 playServicesTagmanagerV4Impl = "18.0.4"
 room = "2.6.1"
 roomCommon = "2.6.1"
+accompanistCountry = "0.20.0"
 
 [libraries]
 androidx-core-ktx = { group = "androidx.core", name = "core-ktx", version.ref = "coreKtx" }
@@ -40,6 +41,7 @@ play-services-tagmanager-v4-impl = { group = "com.google.android.gms", name = "p
 androidx-room-compiler = { group = "androidx.room", name = "room-compiler", version.ref = "room" }
 androidx-room-runtime = { group = "androidx.room", name = "room-runtime", version.ref = "room" }
 androidx-room-common = { group = "androidx.room", name = "room-common", version.ref = "roomCommon" }
+accompanist-country = { group = "com.google.accompanist", name = "accompanist-country", version.ref = "accompanistCountry" }
 
 [plugins]
 androidApplication = { id = "com.android.application", version.ref = "agp" }
